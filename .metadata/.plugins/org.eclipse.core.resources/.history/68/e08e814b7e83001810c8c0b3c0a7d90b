package com.skilldistillery.spotify.controllers;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.skilldistillery.spotify.data.MembershipDAO;
import com.skilldistillery.spotify.entitities.Membership;

@RestController
@RequestMapping("api")
public class MembershipController {
	
	@Autowired
	private MembershipDAO mdao;
	
	@RequestMapping(path = "memberships", method = RequestMethod.GET)
	public List<Membership> index() {
		return mdao.index();
	}

	@RequestMapping(path = "memberships/{id}", method = RequestMethod.GET)
	public Membership show(@PathVariable int id) {
		return mdao.show(id);
	}

	@RequestMapping(path = "memberships", method = RequestMethod.POST)
	public String create(@RequestBody Membership membership, HttpServletRequest req, HttpServletResponse res) {
		if (mdao.create(membership) != null) {
			res.setStatus(201);
			return "Successfully removed";
		}
		res.setStatus(500);
		return "Unsucessful";
	}

	@RequestMapping(path = "memberships/{id}", method = RequestMethod.DELETE)
	public String remove(@PathVariable int id, HttpServletRequest req, HttpServletResponse res) {
		if (mdao.delete(id) == true) {
			res.setStatus(201);
			return "Successfully removed";
		} else {
			res.setStatus(500);
			return "Unsuccessful";
		}
	}

	@RequestMapping(path = "memberships/{id}", method = RequestMethod.PATCH)
	public Membership update(@RequestBody Membership newMembership, @PathVariable int id) {
		return mdao.update(newMembership, id);
	}

	@RequestMapping(path = "memberships/{id}", method = RequestMethod.PUT)
	public Membership replace(@RequestBody Membership newMembership, @PathVariable int id) {
		return mdao.replace(newMembership, id);
	}

}
