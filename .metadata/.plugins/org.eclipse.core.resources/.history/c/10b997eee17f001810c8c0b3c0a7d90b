package com.skilldistillery.spotify.data;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import com.skilldistillery.spotify.entitities.Tracker;

@Transactional
@Service
public class TrackerDAOImpl implements TrackerDAO {

	@PersistenceContext
	private EntityManager em;

	@Override
	public List<Tracker> index() {
		String query = "SELECT t from Tracker t";
		return em.createQuery(query, Tracker.class).getResultList();
	}

	@Override
	public Tracker show(int id) {
		return em.find(Tracker.class, id);
	}

	@Override
	public Tracker createTracker(Tracker tracker) {
		em.persist(tracker);
		em.flush();
		return tracker;
	}

	@Override
	public boolean delete(int id) {
		Boolean removed = false;
		Tracker t = em.find(Tracker.class, id);
		em.remove(t);
		if (em.find(Tracker.class, id) == null) {
			removed = true;
		}
		return removed;
	}

	@Override
	public Tracker update(Tracker newTracker, int id) {
		Tracker t = em.find(Tracker.class, id);
		if (newTracker.getDate() != null) {
			t.setDate(newTracker.getDate());
		}
		if (newTracker.getMinutesPlayed() != 0.0) {
			t.setMinutesPlayed(newTracker.getMinutesPlayed());
		}
		return t;
	}

	@Override
	public Tracker replace(Tracker newTracker, int id) {
		Tracker t = em.find(Tracker.class, id);
		t.setDate(newTracker.getDate());
		t.setMinutesPlayed(newTracker.getMinutesPlayed());
		return t;
	}

	@Override
	public double average(int id) {
		double average = 9.99 / (em.find(Tracker.class, id).getMinutesPlayed());
		return average;
	}

	@Override
	public int total() {
		int sum = 0;
		String query = "SELECT t from Tracker t";
		List<Tracker> trackers = em.createQuery(query, Tracker.class).getResultList();
		for (Tracker tracker : trackers) {
			sum += tracker.getMinutesPlayed();
		}
		return sum;
	}

}
